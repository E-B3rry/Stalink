redComSides = {
  ["left"] = {},
  ["right"] = {},
  ["up"] = {},
  ["down"] = {},
  ["front"] = {},
  ["back"] = {}
}

function isOpen(port, sides)
  if type(port) != "number" then
    error("Port argument must be a number.", 2)
  elseif port < 1 or port > 65535 then
    error("Port out of range [1 - 65535], got " .. port .. ".", 2)
  end

  if type(sides) == "string" then
    sides = {sides}
  elseif type(sides) ~= "table" then
    sides = {"left", "right", "up", "down", "front", "back"}
  end

  for side in sides do
    for side in redComSides do
      for openedPort in side do
        if port == openedPort then
          return true
        end
      end
    end
  end

  return false
end

function getOpenableModemSide()
  for side, ports in ipairs(redComSides) do
    if peripheral.getType(side) == "modem" then
      if #ports < 128 then
        return side
      end
    end
  end

  return nil
end

function open(ports, side)
  local notSpecifiedSide = false

  if side then
    local t = peripheral.getType(side)
    if t == nil then
      error("No peripheral detected on side " .. side .. ".", 2)
    elseif t ~= "modem"
      error("The peripheral connected to side " .. side .. " is not a modem.", 2)
    end

    if #(redComSides[side]) > 127 then
      error("The " .. side .. " modem cannot open another channel (128 already in use).", 2)
    end
  else
    side = getOpenableModemSide()
    notSpecifiedSide = true

    if not side then
      error("There aren't any modem connected to the computer that can open channel.", 2)
    end
  end

  if type(ports) == "number" then
    peripheral.call(side, "open", ports)
    redComSides[side].insert(ports)
  elseif type(ports) == "table" then
    for port in ports do
      if isOpen(port) then
        goto open_function_continue_statment
      end

      if #(redComSides[side]) > 127 then
        if notSpecifiedSide then
          side = getOpenableModemSide()

          if not side then
            error("Couldn't open all ports because there aren't any modem connected to the computer that can open channel anymore. (All the modems have 128 channels in use)", 2)
          end
        else
          error("Couldn't open all ports because " .. side .. " modem cannot open another channel (128 already in use).", 2)
        end
      end

      peripheral.call(side, "open", port)
      redComSides[side].insert(port)

      ::open_function_continue_statment::
    end
  else
    error("Expected number or table of numbers", 2)
  end

  return true
end
